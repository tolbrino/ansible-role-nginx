#!/usr/bin/env python

from pygtail import Pygtail
from datadog import statsd
import re

# nginx.net.response_time
# statsd.histogram('', duration)

# nginx.net.response_codes.<x>
# nginx.net.method.<x>
# statsd.increment

log_file = '{{ nginx_log_dir }}/{{ item }}.access.log'

name_prefix = 'nginx'

statsd_type = {
    'response_code': 'increment',
    'method': 'increment',
    'response_time': 'histogram',
    'bytes_sent': 'histogram',
    'gzip_ratio': 'histogram',
}

log_re = re.compile(
    (r''
     '(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) '
     '- \[(\d{2}\/[a-z]{3}\/\d{4}:\d{2}:\d{2}:\d{2} '
     '(\+|\-)\d{4})\] '
     '((\"(?P<method>\w+) )(?P<url>.+)(http\/\d\.\d\")) '
     '((\-)|(?P<response_code>\d{3})) '
     '((\-)|(?P<bytes_sent>\d+)) '
     '((\-)|(?P<gzip_ratio>\d+\.\d+)) '
     '((\-)|(?P<response_time>\d+\.\d+)) '
     '(["]((\-)|(.+))["]) '
     '(["]((\-)|(.+))["]) '
     '(["]((\-)|(.+))["])'),
    re.IGNORECASE)


def parse_line(line):
    """ Given a log line, returns a dict of values
        method (GET, POST, PUT, PURGE, ...)
        response_time: (seconds)
        response_code: (404, 302, ...)
        bytes_sent: <int>
        gzip_ratio: <int>
    """
    print line
    match = log_re.match(line.strip())
    if not match:
        return None
    else:
        return match.groupdict()


def main():
    """ Pull unprocessed lines from a log file.
        For each line and each extracted metric, submit the data.
    """

    for line in Pygtail(log_file):
        data = parse_line(line)
        if not data:
            print "Error parsing {0}".format(line)
            continue

        prefix = '.'
        if "/websocket?" in data['url']:
            prefix = ".websocket.{0}.".format('.'.join(data['url'].split('/')[1:-1]))

        for k, v in data.iteritems():
            if k in statsd_type:
                if statsd_type[k] == 'increment':
                    metric_name = "{0}.{1}.{2}".format(
                        name_prefix,
                        k,
                        v.lower())
                    statsd.increment(metric_name)
                elif statsd_type[k] == 'histogram':
                    metric_name = "{0}{1}{2}".format(name_prefix, prefix, k)
                    statsd.histogram(metric_name, v)

if __name__ == '__main__':
    main()
